{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","id","title","summary","year","poster","genres","className","src","alt","map","genre","index","App","props","console","log","state","isLoading","renderTime","Date","now","this","movies","movie","length","slice","medium_cover_image","a","axios","get","data","setState","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAIe,SAASA,EAAT,GAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC/D,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKP,EAAOA,MAAOA,IACrC,sBAAKK,UAAU,aAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,aAAd,SAA4BH,IAC5B,mBAAGG,UAAU,gBAAb,SAA8BJ,IAC9B,oBAAII,UAAU,eAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBL,UAAU,qBAA1B,SAAgDI,GAAvCC,c,ICRAC,E,kDAMnB,WAAYC,GAAO,IAAD,6BAChBC,QAAQC,IAAI,gBACZ,cAAMF,IAWRG,MAAQ,CACNC,WAAW,EACXC,WAAYC,KAAKC,OAfD,E,0CAkBlB,WACEN,QAAQC,IAAI,UACZD,QAAQC,IAAIM,KAAKL,OAFX,MAGsBK,KAAKL,MAA1BC,EAHD,EAGCA,UAAWK,EAHZ,EAGYA,OAClB,OAAO,yBAAShB,UAAU,YAAnB,SACJW,EACC,qBAAKX,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGgB,EAAOb,KAAI,SAAAc,GAAK,OACf,cAAC,EAAD,CAEEvB,GAAIuB,EAAMvB,GACVC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QAAQsB,OAAS,IAAvB,UAAgCD,EAAMrB,QAAQuB,MAAM,EAAG,KAAvD,OAAmEF,EAAMrB,QAClFC,KAAMoB,EAAMpB,KACZC,OAAQmB,EAAMG,mBACdrB,OAAQkB,EAAMlB,QANTkB,EAAMvB,a,sEAcvB,8BAAA2B,EAAA,sEACyCC,IAAMC,IAAI,yEADnD,gBACuBP,EADvB,EACSQ,KAAOA,KAAOR,OACrBD,KAAKU,SAAS,CAACT,SAAQL,WAAW,IAClCH,QAAQC,IAAIM,KAAKL,OAHnB,gD,2DAnD+BgB,IAAMC,WCMxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.387a77e5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport \"./Movie.css\";\r\n\r\nexport default function Movie({id, title, summary, year, poster, genres}){\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie-data\">\r\n        <h3 className=\"movie-title\">{title}</h3>\r\n        <h5 className=\"movie-year\">{year}</h5>\r\n        <p className=\"movie-summary\">{summary}</p>\r\n        <ul className=\"movie-genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"movie-genres-genre\">{genre}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}","import './App.css';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport Movie from './Movie.js';\r\n\r\n\r\nexport default class App extends React.Component {\r\n\r\n  /**\r\n   * 1. constructor는 async로 사용할 수 없다. 즉, constructor안에서 await도 사용불가\r\n   * 2. fetch작업결과를 state에 저장&사용하려는 경우, fetch처리보다 render가 먼저 처리될수 있다.\r\n   */\r\n  constructor(props){\r\n    console.log(\"constructor\");\r\n    super(props);\r\n    /*\r\n    fetch(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json\")\r\n      .then(response => response.json())\r\n      .then(({data: {movies}}) => {\r\n        //console.log(this.state); // {isLoading: true, renderTime: Date.now()}\r\n        // this.setState({movies}); // Warning: Can't call setState on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the App component.\r\n        this.state = {movies: movies}; // state객체를 대체함. 기존 state속성은 제거.\r\n      }); \r\n    */\r\n  }\r\n  state = {\r\n    isLoading: true,\r\n    renderTime: Date.now()\r\n  }\r\n\r\n  render(){\r\n    console.log(\"render\");\r\n    console.log(this.state);\r\n    const {isLoading, movies} = this.state;\r\n    return <section className=\"container\">\r\n      {isLoading ? (\r\n        <div className=\"loader\">\r\n          <span className=\"loader_text\">Loading...</span>\r\n        </div>\r\n      ) : (\r\n        <div className=\"movies\">\r\n          {movies.map(movie =>\r\n            <Movie\r\n              key={movie.id}\r\n              id={movie.id}\r\n              title={movie.title}\r\n              summary={movie.summary.length > 180 ? `${movie.summary.slice(0, 160)}...` : movie.summary}\r\n              year={movie.year}\r\n              poster={movie.medium_cover_image}\r\n              genres={movie.genres}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </section>\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const {data: {data: {movies}}} = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\");\r\n    this.setState({movies, isLoading: false});\r\n    console.log(this.state);\r\n  }\r\n\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}